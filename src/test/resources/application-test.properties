server.address=localhost
server.port=0

management.opentelemetry.resource-attributes.deployment.environment=integTest

#logging.level.root=TRACE
#logging.level.com.justincranford.oteldemo=INFO

#logging.level.io.micrometer=TRACE
#logging.level.io.opentelemetry.exporter=TRACE
#logging.level.io.micrometer.tracing.otel.bridge.Slf4JBaggageEventListener=DEBUG
#logging.level.io.micrometer.tracing.otel.bridge.Slf4JEventListener=DEBUG

# Most on-prem databases (e.g. PostgreSQL, H2) don't support emitting telemetry (i.e. OTLP telemetry), but instrumenting JPA/Hibernate/JDBC at application-side can emit spans for SQL
spring.jpa.show-sql=true

spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.hibernate.SQL=DEBUG

spring.jpa.properties.hibernate.generate_statistics=true
logging.level.org.hibernate.stat=DEBUG

# Enable OpenTelemetry instrumentation for JDBC and Hibernate
management.opentelemetry.tracing.jdbc.enabled=true
management.opentelemetry.tracing.hibernate.enabled=true

#########################################################
#### Micrometer - Global Distribution Configuration (since Spring Boot 2.x)
#########################################################

# These are commented out because we use programmatic configuration in TelemetryConfigurationProperties instead
#management.metrics.distribution.percentiles-histogram.fake_duration=0.5,0.95,0.99,0.995
#management.metrics.distribution.minimum-expected-value.fake_duration=0.1ms
#management.metrics.distribution.maximum-expected-value.fake_duration=30000ms
#management.metrics.distribution.sla.fake_duration=10ms,50ms,100ms,500ms,1000ms,5000ms,10000ms
#management.metrics.distribution.percentile-precision.fake_duration=5
#management.metrics.distribution.expiry.fake_duration=10m

# For all metrics (use with caution in production)
#management.metrics.distribution.percentiles-histogram=true

#########################################################
#### Programmatic Test Telemetry Configuration Properties
#########################################################

### Fake Counter Configuration
test.telemetry.counter.name=fake_event
test.telemetry.counter.description=fake event counter
test.telemetry.counter.base-unit=tasks
test.telemetry.counter.tag-key=c
test.telemetry.counter.tag-value=123

### Fake Gauge Configuration
test.telemetry.gauge.name=fake_temperature
test.telemetry.gauge.description=fake temperature gauge
test.telemetry.gauge.base-unit=celsius
test.telemetry.gauge.tag-key=t
test.telemetry.gauge.tag-value=1000

### Fake Histogram Configuration
test.telemetry.histogram.name=fake_duration
test.telemetry.histogram.description=fake duration histogram
test.telemetry.histogram.base-unit=ms
test.telemetry.histogram.tag-key=d
test.telemetry.histogram.tag-value=99
## buckets of per-pod gauge values (e.g. duration in milliseconds)
# set min to guarantee that bucket boundary is reported
test.telemetry.histogram.minimum-expected-value=0.1
# set max to guarantee that bucket boundary is reported
test.telemetry.histogram.maximum-expected-value=30000.0
# set SLOs and SLAs, to guarantee those bucket boundaries are reported
test.telemetry.histogram.service-level-objectives=10.0,50.0,100.0,500.0,1000.0,5000.0,10000.0
## buckets of per-pod computed percentiles
# only compute and report percentiles for worse cases (e.g. P50, P95, P99, P99.5)
test.telemetry.histogram.percentiles=0.500,0.950,0.990,0.995
# aggregating many per-pod percentiles requires sending extra precision (e.g. 3 digits per-pod, and 100 pods => 2 extra digits per-pod)
test.telemetry.histogram.percentile-precision=5
# limit age of data used to compute percentiles, but make sure worst case metrics collection delay doesn't exceed it
test.telemetry.histogram.distribution-statistic-expiry=10m
